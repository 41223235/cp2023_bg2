<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<p><span>倉儲:<a href="https://github.com/41223235/cp2023_bg2">https://github.com/41223235/cp2023_bg2</a></span></p>
<p><span>組員網頁:</span></p>
<p>41223201:<a href="https://41223201.github.io/cp2023/content/index.html">https://41223201.github.io/cp2023/content/index.html</a></p>
<p><span>41223202:<a href="https://41223202.github.io/cp2023/content/index.html">https://41223202.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223206:<a href="https://41223206.github.io/cp2023/content/index.html">https://41223206.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223208:<a href="https://41223208.github.io/cp2023/content/index.html">https://41223208.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223209:<a href="https://41223209.github.io/cp2023/content/index.html">https://41223209.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223226:<a href="https://lin41223226.github.io/cp2023/content/index.html">https://lin41223226.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223228:<a href="https://hyy41223228.github.io/cp2023/content/index.html">https://hyy41223228.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223234:<a href="https://41223234.github.io/cp2023/content/index.html">https://41223234.github.io/cp2023/content/index.html</a></span></p>
<p><span>41223235:<a href="https://41223235.github.io/cp2023/content/index.html">https://41223235.github.io/cp2023/content/index.html</a></span></p>
<p></p>
<h1>w5</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭檔案
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p><br/><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<h4>台灣國旗 ROC</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
 
    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
 
    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
 
    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量
 
    gdPoint points[3]; // 三個頂點的陣列
 
    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;
 
        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);
 
        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;
 
        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_roc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<p></p>
<h4>美國國旗 USA </h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);
 
int main() {
    int width = 800;
    int height = (int)(width / 1.9);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_usa_flag(img);
 
    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打開輸出檔案時出錯。\n");
        return 1;
    }
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
 
    return 0;
}
 
void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 國旗顏色
    red = gdImageColorAllocate(img, 178, 34, 52); // 紅色條紋
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色條紋
    blue = gdImageColorAllocate(img, 60, 59, 110); // 藍色矩形
 
    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小
 
    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }
 
    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);
 
    int star_spacing_x = (int)(0.129 * height); // 橫向星星之間的間距
    int star_spacing_y = (int)(0.054 * height); // 縱向星星之間的間距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置
 
    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;
 
        // 計算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;
 
        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;
 
            // 旋轉角度（以弧度為單位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋轉
 
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}
 
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];
 
    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }
 
    // 用指定的顏色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_usa_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<p></p>
<h1>w7</h1>
<h4>中國國旗 CHINA</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
  
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
  
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
  
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
  
    draw_japan_flag(img);
  
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
  
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
  
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
     
  
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
  
  
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_proc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<h4></h4>
<p>英國國旗 UK</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
  
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
  
int main() {
    // 設定國旗的寬和高
    int width = 1200;
    int height = width / 2;
  
    // 建立圖像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
  
    // 繪製英國國旗
    draw_uk_flag(img);
  
    // 將圖像保存到檔案
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打開輸出檔案時發生錯誤。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
  
  
  
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
  
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 藍色
  
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
  
  
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
  
    int x1, y1, x2, y2, x3, y3;
  
    // 繪製白色斜線
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
  
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
  
      
    // 繪製紅色斜線
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
  
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
  
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
  
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
  
  int x1, y1, x2, y2, x3, y3;
    
  // 繪製  斜線
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
    
    
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
  
  
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
      
    
  }
    
    // 繪製白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
  
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
  
    // 繪製紅色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_uk_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<h4>韓國國旗 KOREA</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
  
#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"
  
int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;
  
    im = gdImageCreate(WIDTH, HEIGHT);
  
    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);
  
    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);
  
    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);
  
    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);
  
  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     
  
  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);
  
  int circleX2 = 515;    // 圓心的 X 座標
    
 int circleY2 = 337.5;
  
  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
    
  {
      
    
  // 起點和終點位置
    
  int startX = 340;    
  // 線的起點 X 座標
    
  int startY = 90;   
  // 線的起點 Y 座標
    
  int endX = 200;     
  // 線的終點 X 座標
    
  int endY = 260;     
  // 線的終點 Y 座標
   
  int lineWidth = 23;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);
  
  int startX2 = 213;    
  // 線的起點 X 座標
  
  int startY2 = 270;   
  // 線的起點 Y 座標
  
  int endX2 = 133;     
  // 線的終點 X 座標
  
  int endY2 = 210;     
  // 線的終點 Y 座標
  
  int lineWidth2 = 25;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);
  
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);
  
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);
  
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);
  
  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
    
  int startX = 330;    
  // 線的起點 X 座標
    
  int startY = 520;   
  // 線的起點 Y 座標
    
  int endX = 190;     
  // 線的終點 X 座標
    
  int endY = 350;     
  // 線的終點 Y 座標
   
  int lineWidth = 23;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
  
  int startX2 = 213;    
  // 線的起點 X 座標
  
  int startY2 = 330;   
  // 線的起點 Y 座標
  
  int endX2 = 133;     
  // 線的終點 X 座標
  
  int endY2 = 390;     
  // 線的終點 Y 座標
  
  int lineWidth2 = 25;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
  
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
  
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
  
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
  
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
  
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
  
  }
  
  {
    // 起點和終點位置
    
  int startX = 564;    
  // 線的起點 X 座標
    
  int startY = 520;   
  // 線的起點 Y 座標
    
  int endX = 704;     
  // 線的終點 X 座標
    
  int endY = 350;     
  // 線的終點 Y 座標
   
  int lineWidth = 23;  // 線的寬度
      
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);
  
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
      
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
      
  int startX2 = 553;    
  // 線的起點 X 座標
  
  int startY2 = 330;   
  // 線的起點 Y 座標
  
  int endX2 = 633;     
  // 線的終點 X 座標
  
  int endY2 = 390;     
  // 線的終點 Y 座標
  
  int lineWidth2 = 25;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);
  
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);
  
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);
  
  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
    
  int startX = 330;    
  // 線的起點 X 座標
    
  int startY = 520;   
  // 線的起點 Y 座標
    
  int endX = 190;     
  // 線的終點 X 座標
    
  int endY = 350;     
  // 線的終點 Y 座標
   
  int lineWidth = 23;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
  
  int startX2 = 213;    
  // 線的起點 X 座標
  
  int startY2 = 330;   
  // 線的起點 Y 座標
  
  int endX2 = 133;     
  // 線的終點 X 座標
  
  int endY2 = 390;     
  // 線的終點 Y 座標
  
  int lineWidth2 = 25;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
  
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
  
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
  
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
  
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
  
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
  
  }
  {
    // 起點和終點位置
    
  int startX = 564;    
  // 線的起點 X 座標
    
  int startY = 97;   
  // 線的起點 Y 座標
    
  int endX = 704;     
  // 線的終點 X 座標
    
  int endY = 267;     
  // 線的終點 Y 座標
   
  int lineWidth = 23;  // 線的寬度
      
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);
  
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
      
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
      
  int startX2 = 553;    
  // 線的起點 X 座標
  
  int startY2 = 277;   
  // 線的起點 Y 座標
  
  int endX2 = 633;     
  // 線的終點 X 座標
  
  int endY2 = 217;     
  // 線的終點 Y 座標
  
  int lineWidth2 = 25;  // 線的寬度
  
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);
  
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);
  
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);
  
    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);
  
  }
    
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_korea_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/></p>
<h4>日本國旗 JAPAN</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
  
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
  
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
  
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
  
    draw_japan_flag(img);
  
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
  
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
  
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
     
  
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
  
  
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_japan_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<p><video controls="controls" height="630" width="1004">
<source src="/images/1.mp4" type="video/mp4"/></video></p>
<p></p>
<h1>w12</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/><br/><br/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Declare the rotation function
void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {
    int i;
    double angle_rad = rotation_ang * M_PI / 180.0;

    for (i = 0; i &lt; num_points; i++) {
        int x = points[i].x - x_orig;
        int y = points[i].y - y_orig;

        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));
        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));
    }
}

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("./../images/hellogd2.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);

    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);

    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);
    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);
    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);

    gdPoint points[4];
    points[0].x = (int)width / 4;
    points[0].y = (int)height * 3 / 4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;

    // Call the rotation function multiple times
    for (int i = 0; i &lt; 4; i++) {
        rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);
        gdImagePolygon(img, points, 4, black);
    }

    gdPoint points2[4];
    points2[0].x = (int)width / 3;
    points2[0].y = (int)height / 2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;

    // Call the rotation function multiple times
    for (int i = 0; i &lt; 12; i++) {
        //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);
        rotateFilledPolygon(500, 200, 30.0, points2, 4);
        gdImageFilledPolygon(img, points2, 4, red);
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd2.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
  
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
  
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
  
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
  
        t += dt;
    }
  
    // Close the data file
    fclose(outputFile);
  
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
  
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p>cd downloads</p>
<p>cc euler_gnuplot_msd_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<p><br/><br/></p>
<h1>w15</h1>
<p><span>1) 根據 </span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EVcefUI2zPpAmP6lnLWLEAoBCBznMnvFpsNE-1VVFGvVZQ?e=goiPpP&amp;isSPOFile=1" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/evcefui2zppamp6lnlwleaobcbznmnvfpsne-1vvfgvvzq?e=goippp">roc_list_coord_flag.7z</a><span><span> </span>程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連.</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
 
int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width * 2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
 
    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
 
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
 
    // 在青天與滿地紅的圖案中以白色畫線繪製連接菱形的四個關鍵點
    gdImageSetThickness(img, 10); // 設置線條粗度為10
    gdImageLine(img, 429, 125, 279, 165, white);
    gdImageLine(img, 279, 165, 170, 274, white);
    gdImageLine(img, 170, 274, 170, 274, white);
    gdImageLine(img, 429, 125, 170, 274, white); // 加入第四條連線
}
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color) {
    // 實現 draw_white_sun 函數的內容
    // 可以在此處繪製白日的內部圖案
}
</pre>
<p></p>
<p><span>2) 承上題, 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標.</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China 
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library 
// https://www.rapidtables.com/web/color/RGB_Color.html 
// 幾何形狀著色與繪圖練習 
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 
#include &lt;stdio.h&gt; 
#include &lt;gd.h&gt; 
#include &lt;math.h&gt; 
  
void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); 
  
int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 
  
    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 
  
    draw_roc_flag(img); 
  
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} 
void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 
   gdImageSetThickness(img, 10); // 設置線條寬度為10
   gdImageLine(img, x1, y1, x2, y2, white); // 畫線
   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 
  
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  { 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 
  
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  // 利用一個藍色大圓與白色小圓畫出藍色環狀 
  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); 
  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); 
  
  
  // 定義座標結構 
  typedef struct { 
      double x; 
      double y; 
  } Point; 
  
  // 計算圓與線的交點 
  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { 
      // 直線斜率 
      double m = (y2 - y1) / (x2 - x1); 
  
      // 直線方程式中的常數項 
      double b = y1 - m * x1; 
  
      // 圓與直線交點的計算 
      double A = 1 + pow(m, 2); 
      double B = 2 * (m * b - m * k - h); 
      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); 
  
      // 判斷交點個數 
    double discriminant = pow(B, 2) - 4 * A * C; 
    if (discriminant &gt; 0) { 
        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); 
        double y_intersect1 = m * x_intersect1 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1); 
  
        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); 
        double y_intersect2 = m * x_intersect2 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2); 
    } else if (discriminant == 0) { 
        double x_intersect = -B / (2 * A); 
        double y_intersect = m * x_intersect + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect); 
    } else { 
        printf("No points.\n"); 
    } 
  
  } 
      // 圓的參數 
      double circle_x = (int)(width/4); // 圓心 x 座標 
      double circle_y = (int)(height/4); // 圓心 y 座標 
      double radius = white_circle_dia +  white_circle_dia*2/15; // 圓半徑 
      // 兩點座標 
  double x3 = 170; 
  double y3 = 274; 
  double x4 = 279; 
  double y4 = 165; 
  
  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); 
  
  double x5 = 279; 
  double y5 = 165; 
  double x6 = 429; 
  double y6 = 125; 
  
  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); 
  }</pre>
<p></p>
<h1>w16</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
  
#define WIDTH 800
#define HEIGHT 600
#define SCALE 100
  
void drawResistor(gdImagePtr im, int x1, int y, int width, int height) {
    int startX = x1 ;
    int endX = x1 + width ;
  
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
  // 向上45度
    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
  
  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
    
  
  {
    int startX = 100;
  gdImageColorAllocate(im, 0, 0, 255);
  
  
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
  
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 }
  
  {
    int startX = 585;
  gdImageColorAllocate(im, 0, 0, 255);
  
  
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
      
  // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
        // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
  
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
      
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
      
    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));
  
}
}
    
int main() {
    gdImagePtr im;
    FILE *outputFile;
  
    // 创建图像对象
    im = gdImageCreateTrueColor(WIDTH, HEIGHT);
    if (im == NULL) {
        fprintf(stderr, "Error creating GD image.\n");
        return 1;
    }
  
    outputFile = fopen("1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
  
    int black, white, red, blue, green;
  
    black = gdImageColorAllocate(im, 0, 0, 0);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 255, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 255);
green = gdImageColorAllocate(im, 0, 255, 0);
    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);
  
    // 绘制墙面
    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);
    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);
  
// 绘制彈簧
    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);
    
    // 绘制质量（方形）
    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
  
  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);
  
      
  
    gdImagePng(im, outputFile);
    fclose(outputFile);
    gdImageDestroy(im);
  
    return 0;
}</pre>
<p><img alt="" height="150" src="/images/1.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
  
#define TIME_STEP 0.01 // 时间步长
#define SIMULATION_TIME 10.0 // 模拟时间
  
// 物体的参数
#define m1 2.0
#define m2 3.0
#define k1 0.5
#define k2 1.0
#define k3 1.5
#define c1 0.25
#define c2 0.33
#define c3 0.5
#define X1_initial 1.0
#define X2_initial -0.5
#define V0 0.0
  
// 计算阻尼力
double dampingForce(double c, double v) {
    return -c * v;
}
  
// 模拟物体运动
void simulateMotion() {
    double X1 = X1_initial;
    double X2 = X2_initial;
    double V1 = V0;
    double V2 = V0;
  
    FILE *fp;
    fp = fopen("motion_data.txt", "w");
  
    for (double t = 0; t &lt;= SIMULATION_TIME; t += TIME_STEP) {
        double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一个物体受到的合力
        double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二个物体受到的合力
        double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二个物体受到的合力
  
        double a1 = F1 / m1; // 第一个物体的加速度
        double a2 = F2 / m2; // 第二个物体的加速度
  
        // 更新速度和位置
        V1 += a1 * TIME_STEP;
        V2 += a2 * TIME_STEP;
  
        X1 += V1 * TIME_STEP;
        X2 += V2 * TIME_STEP;
  
  // 在文件写入时记录 m1 和 m2 的位置和速度数据
  fprintf(fp, "%lf %lf %lf %lf %lf\n", t, X1, X2, V1, V2);
    }
  
  
    fclose(fp);
}
  
int main() {
    simulateMotion();
    return 0;
}</pre>
<<<<<<< HEAD
<p><img alt="" height="150" src="/images/1233.png" width="200"/></p>
<h1>Brython</h1>
=======
<p><img alt="" height="150" src="/images/1233.png" width="200"/></p><h1>Brython</h1>
>>>>>>> ef563944e2b4bef6bd557532d9d3115cbddf9c99
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>期末總結</h1>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">請各學員依照課程內容的錢包與網站評分項目，自行評分。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223201  </span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">(ABCDEFGH) 80分</span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">D：完成課程內容中的</span></span><a href="https://githubio.41223201.repl.co/get_page/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">練習</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></span><span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">E：完成</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w2-w5</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的</span></span><a href="https://cp2023.41223201.repl.co/get_page/Exercises"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">練習</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">F：完成</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6-w7</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的</span></span><a href="https://githubio.41223201.repl.co/get_page/%E7%B7%B4%E7%BF%92%E4%B8%80"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">練習一</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">和</span></span><a href="https://cp2023.41223201.repl.co/get_page/%E7%B7%B4%E7%BF%92%E4%BA%8C"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">練習二</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">G：完成C結合gd繪圖程式庫，畫出</span><a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;">PROC</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">），</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;">英國</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">），</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;">日本</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">）和</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;">韓國</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">）標誌。</span><a href="https://cp2023.41223201.repl.co/get_page/w6"><span style="vertical-align: inherit;">【w6】</span></a><a href="https://cp2023.41223201.repl.co/get_page/w7"><span style="vertical-align: inherit;">【w7】</span></a></span><span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;"></span></a><span style="vertical-align: inherit;"></span><a href="https://cp2023.41223201.repl.co/get_page/w6"><span style="vertical-align: inherit;"></span></a><a href="https://cp2023.41223201.repl.co/get_page/w7"><span style="vertical-align: inherit;"></span></a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">H：完成</span></span><a href="https://cp2023.41223201.repl.co/get_page/w16"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w16最終專案</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></p>
<p><a href="https://cp2023.41223201.repl.co/get_page/%E6%95%99%E5%AD%B8%E5%BD%B1%E7%89%87"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">【教學影片】</span></span></a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223202  (ABCDEFGH) 85分</span></span></p>
<p><span>D: 完成<a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a>中的 Exercises。<a href="https://cp2023.dmes30111.repl.co/get_page/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9">上課內容</a></span></p>
<p><span>E: 完成<span> </span><a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span> </span>週任務中的 Exercises。<a href="https://cp2023.dmes30111.repl.co/get_page/W2~W5%20Exercises">w2~w5練習</a></span></p>
<p><span>F: 完成<span> </span><a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span> </span>週任務中的練習一與練習二。<a href="https://cp2023.dmes30111.repl.co/get_page/%E7%A8%8B%E5%BC%8F%E7%B7%B4%E7%BF%92%E4%B8%80">練習一</a><a href="https://cp2023.dmes30111.repl.co/get_page/%E7%A8%8B%E5%BC%8F%E7%B7%B4%E7%BF%92%E4%BA%8C">練習二</a><a href="https://cp2023.dmes30111.repl.co/get_page/%E7%A8%8B%E5%BC%8F%E7%B7%B4%E7%BF%92%E4%B8%80"></a><br/></span></p>
<p><span>G: 完成 C 結合 gd 繪圖程式庫, 畫出<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg">規格</a>),<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg">規格</a>),<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg">規格</a>)與<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">South Korea</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg">規格</a>) Flags。<a href="https://cp2023.dmes30111.repl.co/get_page/w7">國旗</a></span></p>
<p><span>H: 完成 w16 Final Project。</span><a href="https://cp2023.dmes30111.repl.co/get_page/w16">w16</a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223206<span>（ABCDEFG）85分</span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>D：完成課程內容中的練習<a href="https://cp2023.41223206.repl.co/get_page/ANSIC">Exercises</a></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>E：完成<span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w2-w5</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習<a href="https://cp2023.41223206.repl.co/get_page/c_ex"> c ex</a></span></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">F:完成 <a href="https://mde.tw/cpnote/content/w6-w7.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6-w7</span></span></a><span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習一與練習二 -<a href="https://cp2023.41223206.repl.co/get_page/ANSIC">ANSIC</a> <a href="https://cp2023.41223206.repl.co/get_page/c_ex">c ex</a></span></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>G：完成C結合gd繪圖程式庫，畫出<a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;">PROC</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">），</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;">英國</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">），</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;">日本</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">）和</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;">韓國</span></a><span style="vertical-align: inherit;">（</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><span style="vertical-align: inherit;">）標誌。<a href="https://cp2023.41223206.repl.co/get_page/w6">（W6）</a><a href="https://cp2023.41223206.repl.co/get_page/w7">（W7）</a><a href="https://cp2023.41223206.repl.co/get_page/w6"></a></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span><span style="vertical-align: inherit;">H：完成<a href="https://cp2023.41223206.repl.co/get_page/w16">W16最終專案</a></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223226 </span></span><a href="https://lin41223226.github.io/cp2023"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">【這裡】</span></span></a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223228 </span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（ABCDEFG）85分</span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">D：完成課程內容中的練習</span></span><a href="https://cp2023-1.hadog.repl.co/get_page/ANSIC">Exercises</a></span></p>
<p><span><span style="vertical-align: inherit;">E：完成</span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w2-w5</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的的練習-<a href="https://cp2023-1.hadog.repl.co/get_page/C_EX">c ex</a></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">F：完成<span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6-w7</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習一</span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">和練習二 <a href="https://cp2023-1.hadog.repl.co/get_page/C_EX">c ex</a>  <a href="https://cp2023-1.hadog.repl.co/get_page/ANSIC"> ANSIC</a></span></span></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://cp2023-1.hadog.repl.co/get_page/6w">G：完成C結合gd繪圖程式庫，畫出</a><a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;">PROC</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">），</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;">英國</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">），</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;">日本</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">）和</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;">韓國</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">）標誌。</span>6w<span> </span></a></span></span></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>H：完成<a href="https://cp2023-1.hadog.repl.co/get_page/W16">w16最終專案</a></span></span></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223209（ABCDEFGH）85分</span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">D: 完成</span></span></span><a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">課程內容</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">中的練習 -  </span></span><a href="https://41223209.github.io/cp2023/content/ANSIC.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ANSIC</span></span></a></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">E:完成 </span></span><a href="https://mde.tw/cpnote/content/w2-w5.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w2-w5</span></span></a><span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習 -  </span></span><a href="https://41223209.github.io/cp2023/content/c_ex.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">c_ex</span></span></a></span></span></p>
<p><span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">F:完成 </span></span><a href="https://mde.tw/cpnote/content/w6-w7.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6-w7</span></span></a><span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習一與練習二 -  </span></span><a href="https://41223209.github.io/cp2023/content/ANSIC.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ANSIC</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">、</span></span><a href="https://41223209.github.io/cp2023/content/c_ex.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">c_ex</span></span></a></span></span></span></p>
<p><span><span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">G：完成C結合gd繪圖方案庫，畫出 </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PROC </span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（</span></span></span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">規格</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">），</span></span><span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">英國</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（</span></span></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">規格</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">），</span></span><span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">日本</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（</span></span></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">規格</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）與</span></span><span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">韓國</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（</span></span></span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">規格</span></span></a><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）標誌 -  </span></span><a href="https://41223209.github.io/cp2023/content/w7.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w7</span></span></a></span></span></span></span></p>
<p><span><span><span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">H：完成 w16 最終專案 - </span></span><a href="https://41223209.github.io/cp2023/content/w16.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w16</span></span></a></span></span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">41223235 (ABCDEFG) 85分</span></span></p>
<p><span><span style="vertical-align: inherit;">D：完成課程內容中的練習</span><a href="https://cp2023-1.hadog.repl.co/get_page/ANSIC">Exercises</a></span></p>
<p><span><span style="vertical-align: inherit;">E：完成</span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w2-w5</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的的練習-<a href="https://cp2023-1.hadog.repl.co/get_page/C_EX">c ex</a></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">F：完成<span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6-w7</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">週任務中的練習一</span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">和練習二<span> </span><a href="https://cp2023-1.hadog.repl.co/get_page/C_EX">c ex</a> <span> </span><a href="https://cp2023-1.hadog.repl.co/get_page/ANSIC">ANSIC</a></span></span></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://cp2023-1.hadog.repl.co/get_page/6w">G：完成C結合gd繪圖程式庫，畫出</a><a href="https://en.wikipedia.org/wiki/Flag_of_China"><span style="vertical-align: inherit;">PROC</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">），</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span style="vertical-align: inherit;">英國</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">），</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span style="vertical-align: inherit;">日本</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">）和</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span style="vertical-align: inherit;">韓國</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">（</span></a><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span style="vertical-align: inherit;">規格</span></a><a href="https://cp2023-1.hadog.repl.co/get_page/6w"><span style="vertical-align: inherit;">）標誌。</span>6w<span> </span></a></span></span></span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>41223208(ABCDEFGH)85分</span></span></span></span></span></span></p>
<p><span>D: 是否完成課程內容中的-Exercises</span></p>
<p><span>E: 是否完成<span> </span><a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span> </span>週任務中的-Exercises</span></p>
<p><span>F: 是否完成<span> </span><a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span> </span>週任務中的-練習一與練習二<br/></span></p>
<p><span>G: 是否完成 C 結合 gd 繪圖程式庫, 畫出<a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC(規格)</a>，<a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">英國(規格)</a>，<a href="https://en.wikipedia.org/wiki/Flag_of_Japan">日本(規格)</a>與<a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">韓國(規格)</a> 標誌-<a href="https://41223208.github.io/cp2023/content/w7.html">w7</a><span></span></span></p>
<p><span>H: 是否完成 w16 Final Project</span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span></span></span></span></span></span></span></p>